@using System.Text.Json
@using MadrinHotelCRM.DTO.DTOModels
@using MadrinHotelCRM.Entities.Enums
@using MadrinHotelCRM.ExtensionMethods
@model RezervasyonEkleViewModel

@*  JS’e aktaracağımız veriler *@
<script>
    const odalar = @Html.Raw(JsonSerializer.Serialize(Model.OdaListesi));
    const rezervasyonListesi = @Html.Raw(JsonSerializer.Serialize(Model.RezervasyonListesi));

    // İki tarih aralığının çakışıp çakışmadığını döner
    function tarihCakisiyor(b1, e1, b2, e2) {
      return b1 <= e2 && b2 <= e1;
    }

    // Seçilen tarihlere göre dropdown’u yeniden doldur
    function filtreOdaListesi() {
      const bas = new Date($('[name=BaslangicTarihi]').val());
      const bit = new Date($('[name=BitisTarihi]').val());
      const $sel = $('#odaSelect').empty();
      $sel.append('<option value="">— Bir Oda Seçin —</option>');

      // Tarihler geçersizse tüm odaları göster
      if (isNaN(bas) || isNaN(bit) || bas > bit) {
        odalar.forEach(o => {
          $sel.append(`<option value="${o.OdaId}">Oda ${o.OdaNumarasi}</option>`);
        });
        return;
      }

      // Aksi halde sadece çakışmayanları ekle (iptal edilmişleri atla)
      odalar.forEach(o => {
        const conflict = rezervasyonListesi.some(r =>
          r.OdaId === o.OdaId
          && r.IptalTarihi == null               // Sadece geçerli rezervasyonları kontrol et
          && tarihCakisiyor(
               new Date(r.BaslangicTarihi),
               new Date(r.BitisTarihi),
               bas, bit
             )
        );
        if (!conflict) {
          $sel.append(`<option value="${o.OdaId}">Oda ${o.OdaNumarasi}</option>`);
        }
      });
    }

    // Sayfa yüklendiğinde ve tarihler değiştiğinde filtreyi uygula
    $(function() {
      $('#rezervasyonForm')
        .on('change', '[name=BaslangicTarihi], [name=BitisTarihi]', filtreOdaListesi);
      filtreOdaListesi();
    });
</script>

<div class="row">
    <!-- SOL: Rezervasyon Formu -->
    <div class="col-md-6">
        <h4 class="text-success">Yeni Rezervasyon</h4>
        <form id="rezervasyonForm" class="p-3 border rounded bg-white">
            <!-- Başlangıç -->
            <div class="mb-2">
                <label class="form-label">Başlangıç Tarihi</label>
                <input type="date" name="BaslangicTarihi" class="form-control" required />
            </div>
            <!-- Bitiş -->
            <div class="mb-2">
                <label class="form-label">Bitiş Tarihi</label>
                <input type="date" name="BitisTarihi" class="form-control" required />
            </div>
            <!-- Oda -->
            <div class="mb-2">
                <label class="form-label">Oda</label>
                <select name="OdaId" id="odaSelect" class="form-control" required>
                    <option value="">— Bir Oda Seçin —</option>
                </select>
            </div>
            <!-- Müşteri -->
            <div class="mb-2">
                <label class="form-label">Müşteri</label>
                <div class="input-group">
                    <select name="MusteriId" class="form-control" required>
                        <option value="">— Var Olan Müşteriyi Seçin —</option>
                        @foreach (var m in Model.MusteriListesi)
                        {
                            <option value="@m.MusteriId">@m.Ad @m.Soyad</option>
                        }
                    </select>
                    <button type="button" class="btn btn-outline-primary"
                            onclick="loadComponent('Personel_Musteriler')">
                        Yeni Müşteri Oluştur
                    </button>
                </div>
            </div>
            <!-- Tarife -->
            <div class="mb-2">
                <label class="form-label">Tarife</label>
                <select name="TarifeId" class="form-control" required>
                    <option value="">— Seçiniz —</option>
                    @foreach (var t in Model.TarifeListesi)
                    {
                        <option value="@t.TarifeId">@t.TarifeAdi — @t.Fiyat ₺</option>
                    }
                </select>
            </div>
            <!-- Kişiler -->
            <!-- Yetişkin Sayısı -->
            <div class="mb-2">
                <input type="number" name="YetiskinSayisi" class="form-control" placeholder="Yetişkin" required min="1" />
            </div>

            <!-- Çocuk Sayısı -->
            <div class="mb-2">
                <input type="number" name="CocukSayisi" class="form-control" placeholder="Çocuk" required min="0" />
            </div>
            <button type="submit" class="btn btn-success mt-2">Kaydet</button>
        </form>
    </div>

    <!-- SAĞ: Rezervasyon Listesi -->
    <div class="col-md-6">
        <h4 class="text-primary">Rezervasyonlar</h4>
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th>#</th>
                    <th>Oda</th>
                    <th>Müşteri</th>
                    <th>Başlangıç</th>
                    <th>Bitiş</th>
                    <th>Durum</th>
                    <th>İptal Nedeni</th>
                    <th>İşlem</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in Model.RezervasyonListesi)
                {
                    var oda = Model.OdaListesi.First(o => o.OdaId == r.OdaId);
                    var musteri = Model.MusteriListesi.First(m => m.MusteriId == r.MusteriId);
                    var isIptal = r.Durum == RezervasyonDurum.İptalEdildi;
                    // Bu rezervasyonun faturası var mı?
                    var hasFatura = Model.FaturaListesi.Any(f => f.RezervasyonId == r.RezervasyonId);

                    <tr class="@(isIptal ? "table-danger" : "")">
                        <td>@r.RezervasyonId</td>
                        <td>Oda @oda.OdaNumarasi</td>
                        <td>@musteri.Ad @musteri.Soyad</td>
                        <td>@r.BaslangicTarihi.ToShortDateString()</td>
                        <td>@r.BitisTarihi.ToShortDateString()</td>
                        <td>@r.Durum.GetDisplayName()</td>
                        <td><span class="text-danger">@r.IptalNedeni</span></td>
                        <td>
                            @if (!isIptal)
                            {
                                <button class="btn btn-sm btn-danger rez-iptal"
                                        data-id="@r.RezervasyonId">
                                    İptal
                                </button>

                                @* Sadece faturası yoksa butonu göster *@
                                @if (!hasFatura)
                                {
                                    <button class="btn btn-sm btn-outline-primary fatura-olustur ms-1"
                                            data-id="@r.RezervasyonId">
                                        Fatura Oluştur
                                    </button>
                                }
                                else
                                {
                                    <span class="badge bg-success ms-1">Fatura Oluşturuldu</span>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <script>
        $(function () {
            const $bas = $('[name=BaslangicTarihi]');
            const $bit = $('[name=BitisTarihi]');
            const $yetiskin = $('[name=YetiskinSayisi]');
            const $cocuk = $('[name=CocukSayisi]');

            function tarihVeKisiKontrol() {
                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const basTarih = new Date($bas.val());
                const bitTarih = new Date($bit.val());

                if (basTarih < today || bitTarih < today) {
                    alert("Geçmiş tarihli rezervasyon yapılamaz.");
                    return false;
                }

                if (bitTarih < basTarih) {
                    alert("Bitiş tarihi, başlangıç tarihinden önce olamaz.");
                    return false;
                }

                const yetiskin = parseInt($yetiskin.val(), 10);
                const cocuk = parseInt($cocuk.val(), 10);

                if (isNaN(yetiskin) || yetiskin < 1) {
                    alert("Yetişkin sayısı en az 1 olmalıdır.");
                    return false;
                }

                if (isNaN(cocuk) || cocuk < 0) {
                    alert("Çocuk sayısı negatif olamaz.");
                    return false;
                }

                return true;
            }

            $('#rezervasyonForm').on('submit', function (e) {
                if (!tarihVeKisiKontrol()) {
                    e.preventDefault();
                }
            });

            const bugunStr = new Date().toISOString().split('T')[0];
            $bas.attr('min', bugunStr);
            $bit.attr('min', bugunStr);
        });
    </script>
</div>