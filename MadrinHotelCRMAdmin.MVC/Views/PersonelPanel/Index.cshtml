@model List<MadrinHotelCRM.DTO.DTOModels.OdaDTO>
@using System.Security.Claims
@using MadrinHotelCRM.Entities.Enums
@using MadrinHotelCRM.ExtensionMethods

@{
    ViewData["Title"] = "Personel Panel - Yönetim Ekranı";
    var kullaniciAd = User.Identity?.Name ?? "Personel";
    var kullaniciId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Bilinmiyor";
    var apiBase = ViewBag.ApiBase as string ?? "";
  
}

<style>
    .top-navbar {
        background-color: #198754;
        color: white;
        padding: 10px 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    #solMenu {
        position: relative;
        left: 0;
        transition: left 0.3s ease, opacity 0.3s ease;
        opacity: 1;
        z-index: 100;
    }

        #solMenu.gizle {
            left: -100%;
            opacity: 0;
        }
</style>

<!-- NAVBAR -->
<div class="top-navbar">
    <button class="btn btn-outline-light" id="menuToggle">☰ MENÜ</button>
    <h5 class="m-0 fw-bold">Personel Panel</h5>
    <form asp-controller="Auth" asp-action="Cikis" method="post" class="d-inline">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-outline-light">Çıkış Yap</button>
    </form>
</div>

<!-- SAYFA İÇERİĞİ -->
<div class="container-fluid">
    <div class="row">
        <!-- SOL MENÜ -->
        <div id="solMenu" class="col-md-2 bg-light vh-100 shadow-sm">
            <h4 class="mt-4 text-center text-primary">Personel Panel</h4>
            <ul class="list-group list-group-flush mt-4">
                <li class="list-group-item" onclick="loadComponent('Personel_Musteriler')">
                    👥 Müşteri Yönetimi
                </li>
                <li class="list-group-item" onclick="loadComponent('Personel_Rezervasyon')">
                    📝 Rezervasyonlar
                </li>
                <li class="list-group-item" onclick="loadComponent('Personel_OdaDurumlari')">
                    🛏️ Oda Durumları
                </li>
                <li class="list-group-item" onclick="loadComponent('Personel_Bilgilerim')">
                    🙋‍♂️ Bilgilerim
                </li>
                <li class="list-group-item list-group-item-action" onclick="loadComponent('Faturalar')">🧾 Faturalar</li>
            </ul>
            <form asp-controller="Auth" asp-action="Cikis" method="post" class="mt-4 text-center">
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-outline-danger">Çıkış Yap</button>
            </form>
        </div>

        <!-- ANA PANEL (ViewComponent içerikleri buraya yüklenecek) -->
        <div class="col-md-9 p-4" id="panelContent">
            <h5 class="text-muted">Hoş geldin @kullaniciAd 👋</h5>
            <p>Sol menüden bir işlem seçerek yönetim ekranını kullanabilirsin.</p>
        </div>
    </div>
</div>

<!-- Rezervasyon Detay Modal (Index içinde sabit olmalı) -->
<div class="modal fade" id="rezModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rezervasyon Detayları</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-0">
                <table class="table table-sm mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>#</th>
                            <th>Müşteri</th>
                            <th>Başlangıç</th>
                            <th>Bitiş</th>
                            <th>Durum</th>
                        </tr>
                    </thead>
                    <tbody id="rezList">
                        <!-- JavaScript ile doldurulacak -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts {
 @*    <!-- API kökünü doğru ayarlıyoruz -->
    <script>
        window.apiBaseUrl = ""; // fetch kullanılırken "/api/..." olarak çağrılacak
    </script> *@
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        window.apiBaseUrl = '@apiBase';
        $(function() {
          // Menü butonu
          $('#menuToggle').click(() => $('#solMenu').toggleClass('gizle'));
        });

        // ViewComponent yükleyici
        function loadComponent(name) {
          const url = (name === 'Personel_OdaDurumlari')
            ? '/PersonelPanel/OdaDurumlari'
            : '/ViewComponent/' + name;

          $('#panelContent').load(url, function(_, status) {
            if (status === 'error') {
              $('#panelContent').html(
                '<div class="alert alert-danger">Yüklenirken hata oluştu.</div>'
              );
              return;
            }
            // Yükleme sonrası işlemler
            if (name === 'Personel_OdaDurumlari') {
              $('#durumFilter').val('').trigger('change');
            }
            if (name === 'Personel_Musteriler') {
              bindMusteriEvents();
              $('#kayitForm button[type=submit]').text('Kaydet');
            }
            if(name==='Faturalar')     bindFaturaEvents();
          });
        }
        // Oda Durumları filtresi
        $(document).on('change', '#durumFilter', function() {
          const secilen = $(this).val();
          $('.oda-card').each(function() {
            const durum = $(this).data('durum').toString();
            if (!secilen || durum === secilen) {
              $(this).show();
            } else {
              $(this).hide();
            }
          });
        });

        // Müşteri Event Bağlama
        function bindMusteriEvents() {
          try {
            window.musteriler = JSON.parse($('#musteri-data').val());
          } catch {
            window.musteriler = [];
          }
        }

        // Müşteri Kaydet/Güncelle
        $(document).on('submit', '#kayitForm', function(e) {
          e.preventDefault();
          const dto = {
            MusteriId:  $('input[name=MusteriId]').val(),
            Ad:         $('input[name=Ad]').val(),
            Soyad:      $('input[name=Soyad]').val(),
            Email:      $('input[name=Email]').val(),
            TelNo:      $('input[name=TelNo]').val(),
            TcNo:       $('input[name=TcNo]').val(),
            PasaportNo: $('input[name=PasaportNo]').val(),
            DogumTarihi:$('input[name=DogumTarihi]').val(),
            Cinsiyet:   parseInt($('select[name=Cinsiyet]').val() || '0'),
            Adres:      $('input[name=Adres]').val(),
            YabanciUyrukluMu: $('#yabanciCheck').is(':checked')
          };
          const isUpdate = dto.MusteriId && dto.MusteriId !== "0";
          const url = isUpdate
            ? '/PersonelPanel/MusteriGuncelle'
            : '/PersonelPanel/MusteriKaydet';

          fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(dto)
          })
          .then(r => {
            if (r.ok) {
              loadComponent('Personel_Musteriler');
              $('#kayitForm button[type=submit]').text('Kaydet');
            } else {
              return r.text().then(t => alert('Hata: ' + t));
            }
          });
        });

        // Müşteri Sil
        $(document).on('click', '.sil-btn', function() {
          const id = $(this).data('id');
          if (!confirm("Silmek istediğine emin misin?")) return;
          fetch('/PersonelPanel/MusteriSil', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(id)
          })
          .then(r => {
            if (r.ok) loadComponent('Personel_Musteriler');
            else return r.text().then(t => alert('Silme hatası: ' + t));
          });
        });

        // Müşteri Düzenle
        $(document).on('click', '.duzenle-btn', function() {
          const id = $(this).data('id');
          const m = window.musteriler.find(x => x.MusteriId === id);
          if (!m) return;
          $('input[name=MusteriId]').val(m.MusteriId);
          $('input[name=Ad]').val(m.Ad);
          $('input[name=Soyad]').val(m.Soyad);
          $('input[name=Email]').val(m.Email);
          $('input[name=TelNo]').val(m.TelNo);
          $('input[name=TcNo]').val(m.TcNo || '');
          $('input[name=PasaportNo]').val(m.PasaportNo || '');
          $('input[name=DogumTarihi]').val(m.DogumTarihi ? m.DogumTarihi.split('T')[0] : '');
          $('select[name=Cinsiyet]').val(m.Cinsiyet);
          $('input[name=Adres]').val(m.Adres);
          $('#yabanciCheck').prop('checked', m.YabanciUyrukluMu);
          $('#kayitForm button[type=submit]').text('Güncelle');
        });

        // Rezervasyon Kaydet
        $(document).on('submit', '#rezervasyonForm', async function(e) {
          e.preventDefault();
          const f = $(this);
          const bas = new Date(f.find('[name=BaslangicTarihi]').val()).toISOString();
          const bit = new Date(f.find('[name=BitisTarihi]').val()).toISOString();
          const rezDto = {
            OdaId: Number(f.find('[name=OdaId]').val()),
            MusteriId: Number(f.find('[name=MusteriId]').val()),
            TarifeId: Number(f.find('[name=TarifeId]').val()),
            BaslangicTarihi: bas,
            BitisTarihi: bit,
            YetiskinSayisi:  Number(f.find('[name=YetiskinSayisi]').val()),
            CocukSayisi:     Number(f.find('[name=CocukSayisi]').val())
          };

          const res = await fetch('/PersonelPanel/RezervasyonKaydet', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(rezDto)
          });
          if (!res.ok) {
            const msg = await res.text();
            alert('Rezervasyon başarısız: ' + msg);
            return;
          }
          alert('Rezervasyon başarıyla oluşturuldu!');
          location.reload();
        });

        // Rezervasyon İptal
        $(document).on('click', '.rez-iptal', async function() {
          const id = $(this).data('id');
          const reason = prompt("Lütfen iptal nedenini girin:");
          if (!reason) return;
          const res = await fetch(`/PersonelPanel/RezervasyonIptal/${id}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(reason)
          });
          if (!res.ok) {
            alert('İptal başarısız: ' + await res.text());
          } else {
            loadComponent('Personel_Rezervasyon');
          }
        });
        // Fatura Oluştur
        $(document).off('click', '.fatura-olustur')
                   .on('click', '.fatura-olustur', async function() {
          const btn = $(this),
                id  = btn.data('id');
          if (!confirm('Bu rezervasyon için fatura oluşturulsun mu?')) return;

          btn.prop('disabled', true).text('Yükleniyor…');

          const res = await fetch(`/PersonelPanel/FaturaOlustur/${id}`, {
            method: 'POST'
          });

          if (!res.ok) {
            const msg = await res.text();
            alert('Fatura oluşturulamadı: ' + msg);
            btn.prop('disabled', false).text('Fatura Oluştur');
            return;
          }

         
            btn.fadeOut(200);
            alert('Fatura başarıyla oluşturuldu!');
            });

          function bindFaturaEvents() {
          
          // Filtreleme
          $('#faturaFilter').off('change').on('change', function(){
            var filter = $(this).val();
            $('#faturaTable tbody tr').each(function(){
              var $tr = $(this),
                  paid = $tr.hasClass('table-success');
              if(!filter)          $tr.show();
              else if(filter==='Odenen')   $tr.toggle(paid);
              else                         $tr.toggle(!paid);
            });
          }).trigger('change');


        // “Ödendi” butonu 
        $(document).off('click', '.btn-odendi')
                   .on('click', '.btn-odendi', async function(){
          const btn = $(this),
                tr  = btn.closest('tr'),
                id  = btn.data('id'),
                url = `${window.apiBaseUrl}/api/fatura/durum-guncelle/${id}?yeniDurum=Odendi`;
          const res = await fetch(url, { method: 'POST' });
          if (res.ok) {
            tr.removeClass('table-danger').addClass('table-success');
            tr.find('td:eq(3)').text('Odendi');
            btn.remove();
          } else {
            alert('Durum güncellenemedi: ' + await res.text());
          }
         });
          
        // Sil butonu
          $(document).off('click', '.btn-fatura-sil').on('click', '.btn-fatura-sil', async function(){
          if (!confirm('Bu faturayı silmek istediğinize emin misiniz?')) return;

          const btn = $(this),
                tr  = btn.closest('tr'),
                id  = btn.data('id'),
                url = '/PersonelPanel/FaturaSil/' + id;

          const res = await fetch(url, { method: 'POST' });
          if (res.ok) {
            tr.fadeOut(200, ()=> tr.remove());
          } else {
            const txt = await res.text();
            alert('Silme başarısız: ' + txt);
          }
        });
        }

        // ───────────── Detay Butonu ─────────────
        // Delegated binding ile dinleme
        $(document).on('click', '.btn-detay', function() {
          const odaId = $(this).data('id');
          console.log('Detay tıklandı, odaId=', odaId);

          // Önce listeyi temizle
          $('#rezList').empty();

          fetch(`${window.apiBaseUrl}/api/oda/${odaId}/reservations`)
            .then(response => {
              if (!response.ok) throw new Error(`Status ${response.status}`);
              return response.json();
            })
            .then(list => {
              if (!list.length) {
                $('#rezList').append('<tr><td colspan="5" class="text-center">Rezervasyon bulunamadı.</td></tr>');
              } else {
                list.forEach(r => {
                  $('#rezList').append(`
                    <tr>
                      <td>${r.rezervasyonId}</td>
                      <td>${r.musteri?.ad ?? r.musteriId}</td>
                      <td>${new Date(r.baslangicTarihi).toLocaleDateString()}</td>
                      <td>${new Date(r.bitisTarihi).toLocaleDateString()}</td>
                      <td>${r.durum}</td>
                    </tr>
                  `);
                });
              }
              $('#rezModal').modal('show');
            })
            .catch(err => {
              console.error('Rezervasyon yüklenirken hata:', err);
              alert('Rezervasyonlar yüklenemedi. Konsolu kontrol et!');
            });
        });

    </script>
}
